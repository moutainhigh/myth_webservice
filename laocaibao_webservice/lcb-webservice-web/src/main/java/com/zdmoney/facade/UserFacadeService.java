package com.zdmoney.facade;import cn.hutool.core.convert.Convert;import com.alibaba.fastjson.JSON;import com.google.common.collect.Maps;import com.zdmoney.assets.api.common.dto.AssetsResultDto;import com.zdmoney.assets.api.dto.subject.borrow.BorrowConfirmDto;import com.zdmoney.assets.api.dto.subject.borrow.BorrowerContactsDto;import com.zdmoney.assets.api.dto.subject.borrow.ConfirmBorrowDeatilReqDto;import com.zdmoney.assets.api.dto.subject.borrow.ConfirmBorrowDeatilResDto;import com.zdmoney.assets.api.facade.subject.ILCBSubjectFacadeService;import com.zdmoney.assets.api.utils.MD5Utils;import com.zdmoney.common.ConfigParamBean;import com.zdmoney.component.mq.ProducerService;import com.zdmoney.constant.AppConstants;import com.zdmoney.constant.BusiConstants;import com.zdmoney.constant.ParamConstant;import com.zdmoney.enums.BusiTypeEnum;import com.zdmoney.exception.BusinessException;import com.zdmoney.integral.api.dto.coupon.CouponRuleSource;import com.zdmoney.mapper.bank.CustomerBankAccountMapper;import com.zdmoney.mapper.customer.CustomerMainInfoMapper;import com.zdmoney.marketing.entity.AuthMessage;import com.zdmoney.marketing.entity.RegisterMessage;import com.zdmoney.models.MerchantRegisterRecord;import com.zdmoney.models.bank.CustomerBankAccount;import com.zdmoney.models.customer.CustomerMainInfo;import com.zdmoney.service.CustInviteLineService;import com.zdmoney.service.CustomerMainInfoService;import com.zdmoney.service.MerchantInfoService;import com.zdmoney.service.MerchantRegisterRecordService;import com.zdmoney.service.customer.CustomerValidateCodeService;import com.zdmoney.service.sys.AppSysInitService;import com.zdmoney.service.sys.SysSwitchService;import com.zdmoney.service.welfare.WelfareService;import com.zdmoney.session.RedisSessionManager;import com.zdmoney.utils.LaocaiUtil;import com.zdmoney.utils.StringUtil;import com.zdmoney.utils.ThreeDesUtils;import com.zdmoney.utils.ValidatorUtils;import com.zdmoney.web.dto.CustomerDTO;import com.zdmoney.webservice.api.common.CustomerAccountType;import com.zdmoney.webservice.api.common.MsgType;import com.zdmoney.webservice.api.common.dto.ResultDto;import com.zdmoney.webservice.api.dto.customer.*;import com.zdmoney.webservice.api.facade.IUserFacadeService;import com.zendaimoney.laocaibao.wx.common.Constants;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.joda.time.DateTime;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.MessageSource;import org.springframework.stereotype.Service;import websvc.models.Model_400003;import websvc.req.ReqHeadParam;import websvc.utils.ObjectConvertUtil;import java.net.URLDecoder;import java.util.*;import java.util.concurrent.TimeUnit;@Slf4j@Service("userService")public class UserFacadeService implements IUserFacadeService {    @Autowired    private CustomerMainInfoService customerMainInfoService;    @Autowired    private ConfigParamBean configParamBean;    @Autowired    private AppSysInitService appSysInitService;    @Autowired    private CustomerBankAccountMapper bankAccountMapper;    @Autowired    private CustomerValidateCodeService customerValidateCodeService;    @Autowired    private MerchantInfoService merchantInfoService;    @Autowired    private RedisSessionManager redisSessionManager;    @Autowired    private MerchantRegisterRecordService merchantRegisterRecordService;    @Autowired    private CustInviteLineService custInviteLineService;    @Autowired    private SysSwitchService sysSwitchService;    @Autowired    private WelfareService welfareService;    @Autowired    private BaseService baseService;    @Autowired    private ILCBSubjectFacadeService ilcbSubjectFacadeService;    @Autowired    private ProducerService producerService;    @Autowired    private CustomerMainInfoMapper customerMainInfoMapper;    @Override    public ResultDto<CustomerVO> checkPwd(UserLoginDTO userLoginDTO) {        log.info("登录参数:" + JSON.toJSONString(userLoginDTO));        ResultDto<CustomerVO> resultDto = new ResultDto<>();        CustomerVO customerVO = new CustomerVO();        String cellphone = StringUtils.trim(userLoginDTO.getCmCellphone());        String password = StringUtils.trim(userLoginDTO.getCmPassword());        String systemType = userLoginDTO.getSystemType();        String validateCode = userLoginDTO.getValidateCode();        try {            ValidatorUtils.validate(userLoginDTO);            CustomerMainInfo customerMainInfo = customerMainInfoService.checkExistByCellphone(cellphone);            if (StringUtils.isNotEmpty(validateCode) && AppConstants.LOGIN_TYPE.LOGIN_TYPE_CODE == userLoginDTO.getType()) {                customerMainInfoService.checkWhiteListByPhone(cellphone);                customerMainInfoService.checkSmsCode( cellphone,  validateCode ,13);            } else {                customerMainInfoService.checkLoginPassword(password, customerMainInfo.getCmSalt(), customerMainInfo.getCmLoginPassword());            }            if (customerMainInfo.getCmStatus() == AppConstants.CmStatus.FROZEN_MEMBER) {                throw new BusinessException("customer.status.frozen");            }            // 借款人只能在借款端登录            if (!AppConstants.APP_TYPE_CREDIT.equals(systemType.toUpperCase())                    && CustomerAccountType.BORROWER.getValue().equalsIgnoreCase(customerMainInfo.getAccountType())) {                throw new BusinessException("该手机号码是在捞财宝借款端注册的");            }            // 出借人只能在理财端登录            if (AppConstants.APP_TYPE_CREDIT.equals(systemType.toUpperCase())                    && CustomerAccountType.LENDER.getValue().equalsIgnoreCase(customerMainInfo.getAccountType())) {                throw new BusinessException("该手机号码是在捞财宝出借端注册的");            }            CustomerDTO customerDTO = decorateUser(customerMainInfo);            BeanUtils.copyProperties(customerDTO, customerVO);            resultDto.setCode(ResultDto.SUCCESS_CODE);            resultDto.setData(customerVO);        } catch (Exception e) {            e.printStackTrace();            resultDto = (ResultDto<CustomerVO>) baseService.resultError(e);        }        return resultDto;    }    @Override    public ResultDto<CustomerVO> wechatRegistOrLogin(RegistDTO registDTO) {        log.info("wechatRegistOrLogin-RegistDTO:" + JSON.toJSONString(registDTO));        String cellPhone = registDTO.getCellPhone();        String password = registDTO.getPassword();        String openId = registDTO.getOpenId();        CustomerVO customerVO = new CustomerVO();        ResultDto<CustomerVO> resultDto = new ResultDto<>();        try {            //校验验证码            customerValidateCodeService.checkValidateCode(AppConstants.ValidateCode.WECHAT_REGISTER, cellPhone, registDTO.getValidateCode());            //校验openId是否已经绑定            if (customerMainInfoService.checkLoginOpenIdBind(openId) != null) {                throw new BusinessException("wechat.login.bound");            }            CustomerMainInfo mainInfo = customerMainInfoService.findOneByPhone(cellPhone);            if (mainInfo != null) {                //手机号已经存在                if (StringUtils.isNotEmpty(mainInfo.getLoginOpenId())) {                    throw new BusinessException("cellphone.bound");                }                customerMainInfoService.checkLoginPassword(password, mainInfo.getCmSalt(), mainInfo.getCmLoginPassword());                //判断密码是否相同                if (mainInfo.getCmStatus() == AppConstants.CmStatus.FROZEN_MEMBER) {                    throw new BusinessException(AppConstants.LoginBack.ERROR_DATA_3);//返回会员冻结                } else {                    mainInfo.setLoginOpenId(openId);//绑定微信                    customerMainInfoService.update(mainInfo);                    AuthMessage message = new AuthMessage();                    message.setCmNumber(mainInfo.getCmNumber());                    message.setCustomerId(mainInfo.getId());                    customerMainInfoService.sendRocketMqMsg(BusiTypeEnum.BIND, message);                }            } else {                mainInfo = register(null, null, null, registDTO);                AuthMessage message = new AuthMessage();                message.setCmNumber(mainInfo.getCmNumber());                message.setCustomerId(mainInfo.getId());                customerMainInfoService.sendRocketMqMsg(BusiTypeEnum.BIND, message);            }            // 微信推送            if (StringUtils.isNotEmpty(openId)) {                Map<String, String> map = Maps.newTreeMap();                map.put("name1", "捞财宝");                map.put("name2", "微信");                map.put("time", DateTime.now().toString("yyyy-MM-dd HH:mm"));                customerMainInfoService.sendWxTemplateMsg(mainInfo.getOpenId(), Constants.MSG_TPL_ACCOUNT_BIND, map);            }            CustomerDTO customerDTO = decorateUser(mainInfo);            BeanUtils.copyProperties(customerDTO, customerVO);            resultDto.setCode(ResultDto.SUCCESS_CODE);            resultDto.setData(customerVO);        } catch (Exception e) {            e.printStackTrace();            resultDto = (ResultDto<CustomerVO>) baseService.resultError(e);        }        return resultDto;    }    @Override    public ResultDto<Map> checkWxBind(String openId) throws Exception {        log.info("checkWxBind-openId:" + openId);        Map<String, Object> map = Maps.newHashMap();        ResultDto<Map> resultDto = new ResultDto<>();        try {            CustomerMainInfo mainInfo = customerMainInfoService.checkBind(openId);            if (mainInfo != null) {                map.put("type", "success");                map.put("msg", "用户已绑定手机" + mainInfo.getCmCellphone() + "！");                map.put("customerId", mainInfo.getId());                CustomerDTO dto = decorateUser(mainInfo);                map.put("customerInfo",dto);            } else {                map.put("type", "fail");                map.put("msg", "openId未绑定！");            }            resultDto.setCode(ResultDto.SUCCESS_CODE);            resultDto.setData(map);        } catch (Exception e) {            e.printStackTrace();            resultDto = (ResultDto<Map>) baseService.resultError(e);        }        return resultDto;    }    @Override    public ResultDto<Map> checkLoginOpenIdBind(String openId) throws Exception {        log.info("checkLoginOpenIdBind-openId:" + openId);        Map<String, Object> map = Maps.newHashMap();        ResultDto<Map> resultDto = new ResultDto<>();        try {            CustomerMainInfo mainInfo = customerMainInfoService.checkLoginOpenIdBind(openId);            if (mainInfo == null) {                map.put("type", "unbind");                map.put("userInfo", new CustomerDTO());            } else {                CustomerDTO dto = decorateUser(mainInfo);                map.put("type", "bind");                map.put("userInfo", dto);            }            resultDto.setCode(ResultDto.SUCCESS_CODE);            resultDto.setData(map);        } catch (Exception e) {            e.printStackTrace();            resultDto = (ResultDto<Map>) baseService.resultError(e);        }        return resultDto;    }    /**     * 封装用户登录对象     *     * @param mainInfo     * @return     * @throws Exception     */    public CustomerDTO decorateUser(CustomerMainInfo mainInfo) throws Exception {        CustomerDTO dto = CustomerDTO.fromCustomerMainInfo(mainInfo);        boolean userLabel = "0".equals(mainInfo.getUserLabel()) && "4".equals(mainInfo.getUserLevel());        dto.setCmNumber(mainInfo.getCmNumber());        dto.setCmEmployee(userLabel ? ParamConstant.VALID : ParamConstant.UNVALID);        dto.setCmNumToken(LaocaiUtil.makeUserToken(configParamBean.getUserTokenKey(), mainInfo.getCmNumber()));        if (StringUtils.isNotEmpty(dto.getCmIdnum())) {            dto.setQrCode(configParamBean.getQrCodeurl() + mainInfo.getCmInviteCode());        }        // 出借人允许购买        boolean buyFlag = StringUtils.isEmpty(mainInfo.getAccountType()) || CustomerAccountType.LENDER.getValue().equals(mainInfo.getAccountType());        dto.setBuyingPermitted(buyFlag ? 1 : 0);        String shareRedPackUrl = appSysInitService.getShareRedPackUrl(mainInfo);        if (shareRedPackUrl != null) {            dto.setShareRedUrl(shareRedPackUrl);        }        String tips = null;        if (dto.getIsSetPwd() == 0) {            if (StringUtils.isNotEmpty(mainInfo.getBankAccountId())) {                CustomerBankAccount bankAccount = bankAccountMapper.selectByPrimaryKey(Convert.toLong(mainInfo.getBankAccountId()));                String bankNo = bankAccount.getCbAccount();                tips = "开通时请输入您的尾号为" + bankNo.substring(bankNo.length()-4, bankNo.length())+"的"+bankAccount.getCbBankName()+"卡";            } else {                tips = "开通时请输入您名下的且华瑞银行支持的银行卡";            }            dto.setPwdTips(tips + "，作为您开通华瑞银行交易密码的验证信息。");        }        return dto;    }    /**     * 注册     *     * @param introduceCode     * @param redNo     * @param channelCode     * @param registDTO     * @return     */    public CustomerMainInfo register(String introduceCode, String redNo, String channelCode, RegistDTO registDTO) {        String mechanism = registDTO.getMechanism();        String openChannel = registDTO.getOpenChannel();        String platform = registDTO.getPlatform();        String system = registDTO.getSystem();        String togatherType = registDTO.getTogatherType();        String version = registDTO.getVersion();        String cellphone = registDTO.getCellPhone();        String password = registDTO.getPassword();        String openId = registDTO.getOpenId();        boolean lock = false;        String LOCK = "REGISTER-LOCK-" + cellphone;        String KEY = "REGISTER-KEY-" + cellphone;        CustomerMainInfo mainInfo = new CustomerMainInfo();        try{            lock = redisSessionManager.setNX(KEY, LOCK);            if(lock) {                // 1分钟后,key值失效,自动释放锁                redisSessionManager.expire(KEY, 1, TimeUnit.MINUTES);                if (StringUtils.isEmpty(introduceCode)) {                    introduceCode = AppConstants.SYS_INVITE_CODE;                }                // 转换成大写                password = StringUtils.upperCase(password);                introduceCode = StringUtils.upperCase(introduceCode);                log.info("注册传入的邀请码："+introduceCode);                boolean isOrganCustomer = customerMainInfoService.isOrganCustomer(introduceCode);                customerMainInfoService.validateIntroduceCodeCmOrOrg(introduceCode);                customerMainInfoService.checkNotRegisterByCellphone(cellphone);                //默认为互联网用户                mainInfo.setUserLabel("0");                mainInfo.setUserLevel("3");                // 默认已设置华瑞密码                mainInfo.setIsSetPwd(1);                // 默认为铁象                mainInfo.setMemberLevel(AppConstants.MEMBER_LEVEL.MEMBER_LEVEL_1);                mainInfo.setRatingChangingDate(new Date());                // 获取介绍人信息                CustomerMainInfo custMainInfo = customerMainInfoService.getCustMainInfoByIntroduceCode(introduceCode);                if (custMainInfo != null) {                    mainInfo.setIntroducer(custMainInfo.getCmRealName());                    mainInfo.setIntroducerIdNum(custMainInfo.getCmIdnum());                    log.info("----------->介绍人姓名:" + mainInfo.getIntroducer() + "身份证号:" + mainInfo.getIntroducerIdNum());                    //用户层级 0：理财师  1：理财师1级客户   2：理财师2级客户  3:互联网客户                    if (custMainInfo.getUserLevel() !=null){                        if ("0".equals(custMainInfo.getUserLevel())){//介绍人是理财师                            mainInfo.setUserLabel("1");                            mainInfo.setUserLevel("1");                        }                        if ("1".equals(custMainInfo.getUserLevel())){//介绍人是理财师1级客户                            mainInfo.setUserLabel("1");                            mainInfo.setUserLevel("2");                        }                    }                }                if("credit".equals(platform) || "credit".equals(system)){                    mainInfo.setAccountType(CustomerAccountType.BORROWER.getValue());//借款人                } else {                    mainInfo.setAccountType(CustomerAccountType.LENDER.getValue());//出借人                }                if (StringUtils.isNotEmpty(registDTO.getAccountType())) {                    mainInfo.setAccountType(registDTO.getAccountType());                }                mainInfo.setInviterMemberLevel(custMainInfo.getInviterMemberLevel());                mainInfo.setInviterUserLevel(custMainInfo.getUserLevel());                mainInfo.setIp(registDTO.getIp());                mainInfo.setCmCellphone(cellphone); //手机号                mainInfo.setCmInputDate(new Date()); //录入时间                mainInfo.setCmModifyDate(new Date());//修改时间                if ("credit".equals(openChannel)) {                    mainInfo.setCmPassword(ThreeDesUtils.encryptMode(password));                } else {                    mainInfo.setCmPassword(password.length() < 32 ? MD5Utils.encode(password) : password);//密码  全部转大写入库                }                mainInfo.setCmSalt(customerMainInfoService.genSalt());//盐值                mainInfo.setCmLoginPassword(customerMainInfoService.genLoginPassword(password, mainInfo.getCmSalt()));    //生成登录密码                String advisor = customerMainInfoService.queryIsAdvisor(introduceCode);                mainInfo.setMemberType(AppConstants.MemberType.NORMAL);                if (StringUtils.isNotBlank(advisor)) {                    mainInfo.setMemberType(AppConstants.MemberType.ADVISOR_MEMBER);                    mainInfo.setPlannerInviteCode(advisor);                }                mainInfo.setCmInputId(9999999L); //表示系统默认录入                mainInfo.setCmStatus(1);//新建用户                mainInfo.setCmValid(0);//正常标志位                mainInfo.setCmNumber(LaocaiUtil.buildCustNum("01"));//构建客户编号，01代表APP注册用户                mainInfo.setCmIntroduceCode(introduceCode);//邀请码                mainInfo.setCmOrigin(isOrganCustomer ? BusiConstants.INVITER_ORGAN : BusiConstants.INVITER_PERSONAL);                mainInfo.setCmEmployee(0);//是否员工标识符                mainInfo.setCmAuthenCount(0); //验证此时默认赋值0                //注册相关信息                mainInfo.setCmOpenMechanism(mechanism);                mainInfo.setCmOpenChannel(openChannel);                mainInfo.setCmOpenPlatform(platform);                mainInfo.setCmTogatherType(togatherType);                mainInfo.setCmRegisterVersion(version);                mainInfo.setIsConsumed(0L);                mainInfo.setCmRecommend(AppConstants.RecommendStatus.RECOMMEND_STATUS_5);                mainInfo.setLoginOpenId(StringUtils.defaultString(openId));                mainInfo.setResetErrorTime(0);                mainInfo.setPayErrorTime(0);                mainInfo.setBuyWechat(0);                mainInfo.setChannelCode(channelCode);                mainInfo.setCustomerType("0");                mainInfo.setRegisterSource("credit".equalsIgnoreCase(system) ? AppConstants.RegisterSource.CREDIT : AppConstants.RegisterSource.LCB);                //返利网信息                if (StringUtils.isNotBlank(registDTO.getUid())){                    mainInfo.setFanliUid(registDTO.getUid());//返利网会员标识                }                if (StringUtils.isNotBlank(registDTO.getTc())){                    mainInfo.setFanliTc(registDTO.getTc());//返利网订单跟踪信息                }                //机构理财用户信息(manager)                if (BusiConstants.LOGIN_TYPE_MANAGE.equalsIgnoreCase(platform)) {                    mainInfo.setBusinessLicense(registDTO.getBusinessLicense());                    mainInfo.setOrgCode(registDTO.getOrgCode());                    mainInfo.setEnterpriseName(registDTO.getEnterpriseName());                    mainInfo.setCustomerType(registDTO.getCustomerType());                }                mainInfo = customerMainInfoService.save(mainInfo);                if (StringUtils.isNotBlank(channelCode)) {                    MerchantRegisterRecord merchantRegisterRecord = new MerchantRegisterRecord();                    merchantRegisterRecord.setCustomerNo(mainInfo.getCmNumber());                    merchantRegisterRecord.setMerchantNo(channelCode);                    merchantRegisterRecord.setMerchantType(AppConstants.MerchantType.CHANNEL);                    merchantRegisterRecord.setRegisterDate(new Date());                    merchantRegisterRecordService.save(merchantRegisterRecord);                }                if (!isOrganCustomer) {//邀请人非机构用户                    CustomerMainInfo inviteCustomer = customerMainInfoService.findOneByInviteCode(mainInfo.getCmIntroduceCode());                    if (inviteCustomer != null) {                        custInviteLineService.saveCustInviteLine(mainInfo, inviteCustomer, AppConstants.CustInviteLineStatusContants.RIGISTER);                    }                }                RegisterMessage message = new RegisterMessage();                message.setCmNumber(mainInfo.getCmNumber());                message.setCellphone(cellphone);                message.setPlatform(platform);                message.setSource(CouponRuleSource.REG.name());                message.setCustomerId(mainInfo.getId());                message.setRedNo(redNo);                message.setChannelCode(channelCode);                if (!customerMainInfoService.isOrganCustomer(introduceCode)) {//邀请者是普通用户送积分，机构用户不送                    CustomerMainInfo info = customerMainInfoService.validateIntroduceCode(introduceCode);                    if (info != null) {                        message.setInviteCmNumber(info.getCmNumber());                    }                }                //注册送红包                boolean isCoupon = sysSwitchService.getSwitchIsOn("isCoupon");                if (isCoupon) {//是否开启红包                    welfareService.sendRegistCash(mainInfo.getCmNumber());                }            } else{                // 没有获取到锁                throw new BusinessException("注册失败");            }        } catch (Exception e) {            log.error("注册失败:" + e.getMessage());            throw new BusinessException("注册失败!");        } finally {            if(lock){// 如果获取了锁，则释放锁                redisSessionManager.remove(KEY);                log.info(Thread.currentThread().getName() + "用户注册请求结束，释放锁!");            }        }        return mainInfo;    }    @Override    public  ResultDto<InfoConfirmForWacaiDTO> getInfos(String borrowerNo) throws Exception {        log.info("borrowerNo"+borrowerNo+"请求wbs入参:" +"borrowerNo:"+borrowerNo);        InfoConfirmForWacaiDTO infoConfirmForWacaiDTO = new InfoConfirmForWacaiDTO();        ResultDto resultDto = new ResultDto();        Map<String,Object> result = new HashMap<>();        ConfirmBorrowDeatilResDto cbdr = new ConfirmBorrowDeatilResDto();        try {            //获取标的系统的借款人信息            ConfirmBorrowDeatilReqDto reqDto = new ConfirmBorrowDeatilReqDto();            reqDto.setBorrowerNo(borrowerNo);            log.info("请求assets入参:" +"reqDto:"+JSON.toJSONString(reqDto));            AssetsResultDto<ConfirmBorrowDeatilResDto> res = ilcbSubjectFacadeService.getConfirmBorrowDeatil(reqDto);            log.info("请求assets出参:" +"reqDto:"+JSON.toJSONString(reqDto));            if ("0000".equals(res.getCode())) {                cbdr=res.getData();                createdConfirmInfo(cbdr,infoConfirmForWacaiDTO);            } else {                log.error("查询借款人信息失败:" + res.getMsg());                resultDto.setCode(ResultDto.ERROR_CODE);                resultDto.setMsg(res.getMsg());                return resultDto;            }            resultDto.setData(infoConfirmForWacaiDTO);            log.info("borrowerNo"+borrowerNo+"请求wbs出参:" +"reqDto:"+JSON.toJSONString(reqDto));            return resultDto;        } catch (Exception e) {            log.error(this.getClass().getName(),"getInfos()",e);            resultDto.setCode(ResultDto.ERROR_CODE);            resultDto.setMsg("获取确认信息失败!");            return resultDto;        }    }    /**     * 拼装初始化信息     * @return     */    public void createdConfirmInfo(ConfirmBorrowDeatilResDto cbdr,InfoConfirmForWacaiDTO infoConfirmForWacaiDTO){        if (cbdr != null) {            infoConfirmForWacaiDTO.setBankCardNo(cbdr.getBankCardNo());            infoConfirmForWacaiDTO.setBorrowAmt(cbdr.getBorrowAmount());            infoConfirmForWacaiDTO.setBorrowPeriod(String.valueOf(cbdr.getBorrowTerm()+cbdr.getBorrowTermUnit()));            infoConfirmForWacaiDTO.setYearRate(cbdr.getBorrowRate());            infoConfirmForWacaiDTO.setPayType(cbdr.getRepaymentType());            infoConfirmForWacaiDTO.setSynthesizeCapitalCostRate(cbdr.getSyntheticFundCostRate());            infoConfirmForWacaiDTO.setServiceCharge(cbdr.getSyntheticFreeAmount());            infoConfirmForWacaiDTO.setName(cbdr.getName());            infoConfirmForWacaiDTO.setSex(cbdr.getSex());            infoConfirmForWacaiDTO.setCmIdnum(cbdr.getIdNo());            infoConfirmForWacaiDTO.setCmCellphone(cbdr.getPhone());            infoConfirmForWacaiDTO.setBirthday(cbdr.getBirth());//            infoConfirmForWacaiDTO.setEducationalStatus(cbdr.getEducationLevel());//            infoConfirmForWacaiDTO.setMaritalStatus(cbdr.getMaritalStatus());//            infoConfirmForWacaiDTO.setChildrenStatus(cbdr.getHasChild() == 0?"无":"有");            infoConfirmForWacaiDTO.setEmail(cbdr.getEmail());            infoConfirmForWacaiDTO.setResidentialAddr(cbdr.getHomeAddress());            infoConfirmForWacaiDTO.setCensusregisterAddr(cbdr.getAddress());//            infoConfirmForWacaiDTO.setRestBorrowAmt(cbdr.getOtherLoanBalance());            infoConfirmForWacaiDTO.setCompanyName(cbdr.getCompany());//            infoConfirmForWacaiDTO.setCompanyNature(cbdr.getCompanyNature());//            infoConfirmForWacaiDTO.setBurrowIndustry(cbdr.getTrade());//            infoConfirmForWacaiDTO.setPosition(cbdr.getPost());            infoConfirmForWacaiDTO.setBorrowUse(cbdr.getBorrowPurpose());            infoConfirmForWacaiDTO.setCompanyArea(cbdr.getRegion());//            infoConfirmForWacaiDTO.setCompanyPhone(cbdr.getCompanyPhone());            infoConfirmForWacaiDTO.setMonthlySalary(cbdr.getMonthIncome());//            infoConfirmForWacaiDTO.setRestIncome(cbdr.getOtherIncome());            infoConfirmForWacaiDTO.setLoansUse(cbdr.getBorrowPurpose());//            infoConfirmForWacaiDTO.setCompanyAddr(cbdr.getCompanyAddress());            infoConfirmForWacaiDTO.setSysDateStr(String.valueOf(System.currentTimeMillis()));            infoConfirmForWacaiDTO.setEmployment(cbdr.getEmployment());        }        if (cbdr != null && cbdr.getContactsDtos().size()>0) {            List<BorrowerContactsDTO> list = new ArrayList<>();            for (BorrowerContactsDto borrowerContactsDto : cbdr.getContactsDtos()) {                BorrowerContactsDTO borrowerContactsDTO = new BorrowerContactsDTO();                BeanUtils.copyProperties(borrowerContactsDto, borrowerContactsDTO);                borrowerContactsDTO.setContactsPhone(StringUtil.subStr(borrowerContactsDTO.getContactsPhone(),0));                list.add(borrowerContactsDTO);            }            infoConfirmForWacaiDTO.setContactsDtos(list);        }    }    @Override    public ResultDto confirmInfos(Map param) throws Exception {        log.info("挖财信息注册和实名入参:"+JSON.toJSONString(param));        ResultDto resultDto = new ResultDto();        try {            String cmCellphone = (String) param.get("cmCellphone");            String cmIdnum = (String) param.get("cmIdnum");            String realName = (String) param.get("realName");            String borrowPurpose = (String) param.get("borrowPurpose");            String partnerNo = (String) param.get("partnerNo");            String borrowerNo = (String) param.get("borrowerNo");            String bankCardNo =(String) param.get("bankCardNo");            ReqHeadParam reqHeadParam = (ReqHeadParam) ObjectConvertUtil.mapToObject(param,ReqHeadParam.class);            reqHeadParam.setSystem("wacai");            reqHeadParam.setPlatform("wacai");            Model_400003 model_400003 = new Model_400003();            model_400003.setWacai_flag("wacai");            //挖财用户自动初始化密码            String password = "wc12";            //校验该用户            CustomerMainInfo customerMainInfo = customerMainInfoMapper.selectByIdNum(cmIdnum);            if (customerMainInfo != null && !cmCellphone.equals(customerMainInfo.getCmCellphone()) && realName.equals(customerMainInfo.getCmRealName())) {                log.info("cmCellphone="+cmCellphone+"手机号或者真实姓名不一致");                //存在之前注册的手机号                resultDto.setCode(ResultDto.AUTH_CODE);                resultDto.setMsg("三要素不一致");                return resultDto;            }            //校验银行卡号            if(!validatBankCard(customerMainInfo,bankCardNo)){                log.info("cmCellphone="+cmCellphone+"银行卡号不一致");                //银行卡信息不一致                resultDto.setCode(ResultDto.AUTH_CODE);                resultDto.setMsg("三要素不一致");                return resultDto;            }            if (customerMainInfo != null && !"1002".equals(customerMainInfo.getChannelCode())) {                log.info("cmCellphone="+cmCellphone+"非法客户（其他渠道客户）");                //非挖财渠道                resultDto.setCode(ResultDto.AUTH_CODE);                resultDto.setMsg("非法客户（其他渠道客户）");                return resultDto;            }            CustomerMainInfo mainInfo = customerMainInfoMapper.selectByPhone(cmCellphone);            //校验银行卡号            if(!validatBankCard(mainInfo,bankCardNo)){                log.info("cmCellphone="+cmCellphone+"银行卡号不一致");                //银行卡信息不一致                resultDto.setCode(ResultDto.AUTH_CODE);                resultDto.setMsg("三要素不一致");                return resultDto;            }            if (null == mainInfo) {                //注册                mainInfo = customerMainInfoService.register(cmCellphone,password,null,null,null,"1002",reqHeadParam,null,model_400003,null,null);            }            if (mainInfo != null && !"1002".equals(mainInfo.getChannelCode())) {                log.info("cmCellphone="+cmCellphone+"非法客户（其他渠道客户）");                //非挖财渠道                resultDto.setCode(ResultDto.AUTH_CODE);                resultDto.setMsg("非法客户（其他渠道客户）");                return resultDto;            }            //实名认证            try {                CustomerDTO customerDTO = customerMainInfoService.realNameAuth(mainInfo.getId(),realName,cmIdnum,reqHeadParam);            }catch (BusinessException e){                log.error(this.getClass().getName(),"confirmInfos()",e);                if("auth.maxLimit".equals(e.getMessage())){                    log.info("cmCellphone="+cmCellphone+"实名次数超限!");                    resultDto.setCode(ResultDto.ERROR_CODE);                    resultDto.setMsg("实名次数超限!");                    return resultDto;                }else{                    log.info("cmCellphone="+cmCellphone+"实名和认证失败!");                    resultDto.setCode(ResultDto.ERROR_CODE);                    resultDto.setMsg("实名和认证失败!");                    return resultDto;                }            }            resultDto.setCode(ResultDto.SUCCESS_CODE);            resultDto.setMsg("已信息确认成功");            //注册实名完通知标的            BorrowConfirmDto borrowConfirmDto = new BorrowConfirmDto();            borrowConfirmDto.setPartnerNo(partnerNo);            borrowConfirmDto.setBorrowPurpose(URLDecoder.decode(borrowPurpose, "UTF-8"));            borrowConfirmDto.setBorrowNo(borrowerNo);            //注册实名完通知标的            producerService.sendWacaiInfoConfirmDataMsg(JSON.toJSONString(borrowConfirmDto), MsgType.WACAI_INFO_CONFIRM_NOTICE);            log.info("挖财信息注册和实名出参:"+JSON.toJSONString(resultDto));            return resultDto;        } catch (Exception e) {            log.error(this.getClass().getName(),"confirmInfos()",e);            resultDto.setCode(ResultDto.ERROR_CODE);            resultDto.setMsg("实名和认证失败!");            return resultDto;        }    }    public boolean validatBankCard(CustomerMainInfo customerMainInfo,String bankAccountNo){        if (customerMainInfo != null && StringUtils.isNotEmpty(customerMainInfo.getBankAccountId())) {            CustomerBankAccount bankAccount = bankAccountMapper.selectByPrimaryKey(Convert.toLong(customerMainInfo.getBankAccountId()));            if(bankAccount != null && !bankAccountNo.substring(bankAccountNo.length()-4, bankAccountNo.length()).                    equals(bankAccount.getCbAccount().substring(bankAccount.getCbAccount().length()-4, bankAccount.getCbAccount().length()))){                return false;            }        }        return true;    }}